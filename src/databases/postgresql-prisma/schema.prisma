datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
  schemas  = ["base", "account", "event"]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64"]
  previewFeatures = ["multiSchema"]
}

model Seed {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@schema("base")
}

model Organizer {
  id          Int                @id @default(autoincrement())
  publicId    String             @unique @default(uuid()) @db.Uuid
  name        String
  email       String             @unique
  otpVerified Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  events      SecretSantaEvent[]

  @@schema("account")
}

model SecretSantaEvent {
  id                    Int            @id @default(autoincrement())
  publicId              String         @unique @default(uuid()) @db.Uuid
  location              String
  spendLimit            Int
  settedAllParticipants Boolean        @default(false)
  eventBeginAt          DateTime
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  organizer             Organizer      @relation(fields: [organizerPublicId], references: [publicId])
  organizerPublicId     String         @db.Uuid
  participants          Participant[]
  chats                 AnonimChat[]
  giftWishlists         GiftWishlist[]

  @@schema("event")
}

model Participant {
  id                         Int                 @id @default(autoincrement())
  publicId                   String              @unique @default(uuid()) @db.Uuid
  name                       String
  email                      String
  sendGiftAt                 DateTime?
  receiveGiftAt              DateTime?
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  event                      SecretSantaEvent    @relation(fields: [eventPublicId], references: [publicId])
  eventPublicId              String              @db.Uuid
  givesToParticipant         Participant?        @relation("givesToParticipant", fields: [givesToParticipantPublicId], references: [publicId])
  givesToParticipantPublicId String?             @db.Uuid
  getFromParticipant         Participant?        @relation("getFromParticipant", fields: [getFromParticipantPublicId], references: [publicId])
  getFromParticipantPublicId String?             @db.Uuid
  giftWishlists              GiftWishlist[]
  chats                      AnonimChat[]
  chatMessages               AnonimChatMessage[]
  givesToParticipants        Participant[]       @relation("givesToParticipant")
  getFromParticipants        Participant[]       @relation("getFromParticipant")

  @@unique([eventPublicId, email])
  @@schema("event")
}

model AnonimChat {
  id                  Int                 @id @default(autoincrement())
  publicId            String              @unique @default(uuid()) @db.Uuid
  topic               String              @unique @db.VarChar(255)
  participant         Participant         @relation(fields: [participantPublicId], references: [publicId])
  participantPublicId String              @db.Uuid
  messages            AnonimChatMessage[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  event               SecretSantaEvent    @relation(fields: [eventPublicId], references: [publicId])
  eventPublicId       String              @db.Uuid

  @@schema("event")
}

model AnonimChatMessage {
  id                  Int         @id @default(autoincrement())
  publicId            String      @unique @default(uuid()) @db.Uuid
  message             String      @db.Text()
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  chat                AnonimChat  @relation(fields: [chatPublicId], references: [publicId])
  chatPublicId        String      @db.Uuid
  participant         Participant @relation(fields: [participantPublicId], references: [publicId])
  participantPublicId String      @db.Uuid

  @@schema("event")
}

model GiftWishlist {
  id                  Int              @id @default(autoincrement())
  publicId            String           @unique @default(uuid()) @db.Uuid
  name                String
  image               String?
  giftUrl             String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  participant         Participant      @relation(fields: [participantPublicId], references: [publicId])
  participantPublicId String           @db.Uuid
  event               SecretSantaEvent @relation(fields: [eventPublicId], references: [publicId])
  eventPublicId       String           @db.Uuid

  @@schema("event")
}
